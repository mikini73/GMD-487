using System.Collections;
using System.Collections.Generic;
using UnityEngine;
//Generated by GPTChat using for reference

public class MatchThreeGame : MonoBehaviour
{
    public int gridWidth = 8;
    public int gridHeight = 8;
    public GameObject[] blockPrefabs;
    public float blockSize = 1.0f;

    private GameObject[,] grid;
    private List<GameObject> selectedBlocks = new List<GameObject>();

    void Start()
    {
        InitializeGrid();
    }

    void InitializeGrid()
    {
        grid = new GameObject[gridWidth, gridHeight];

        for (int x = 0; x < gridWidth; x++)
        {
            for (int y = 0; y < gridHeight; y++)
            {
                Vector3 position = new Vector3(x * blockSize, y * blockSize, 0);
                GameObject block = Instantiate(blockPrefabs[Random.Range(0, blockPrefabs.Length)], position, Quaternion.identity);
                block.transform.parent = transform;
                grid[x, y] = block;
            }
        } 
    }

    void Update()
    {
        if (Input.GetMouseButtonDown(0))
        {
            RaycastHit2D hit = Physics2D.Raycast(Camera.main.ScreenToWorldPoint(Input.mousePosition), Vector2.zero);

            if (hit.collider != null)
            {
                GameObject hitBlock = hit.collider.gameObject;

                if (!selectedBlocks.Contains(hitBlock))
                {
                    selectedBlocks.Add(hitBlock);
                }

                if (selectedBlocks.Count >= 2)
                {
                    // Check if selected blocks are adjacent
                    if (AreAdjacent(selectedBlocks[0], selectedBlocks[1]))
                    {
                        SwapBlocks(selectedBlocks[0], selectedBlocks[1]);
                        if (CheckForMatches())
                        {
                            // Handle matches
                            Debug.Log("Match Found!");
                        }
                        else
                        {
                            // If no match, swap back
                            SwapBlocks(selectedBlocks[0], selectedBlocks[1]);
                        }
                    }
                    selectedBlocks.Clear();
                }
            }
        }
    }

    bool AreAdjacent(GameObject block1, GameObject block2)
    {
        float distance = Vector3.Distance(block1.transform.position, block2.transform.position);
        return distance < blockSize * 1.1f; // Adjust this value for your needs
    }

    void SwapBlocks(GameObject block1, GameObject block2)
    {
        Vector3 tempPos = block1.transform.position;
        block1.transform.position = block2.transform.position;
        block2.transform.position = tempPos;
    }

    bool CheckForMatches()
    {
        // Implement your matching logic here
        return false;
    }
}
