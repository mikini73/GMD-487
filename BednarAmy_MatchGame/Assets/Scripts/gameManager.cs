using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
public class gameManager : MonoBehaviour
{
    //RowTransformPoint is the parent of rowPrefab
    //Insert the place where the rowPrefab will spawn
    public Transform RowTransformPoint;
    //Inset Row Prefab
    public GameObject rowPrefab;
    //The array for the storing of the number of rows
    public GameObject[] rowA;
   
    //This is the placeholders for the maximum number of rows and columns that you want generated. It shows up inside of above rowA array 
    //in the Inspector, so can be set by you
    [SerializeField] private int m_rows = 0;
    [SerializeField] private int m_columns = 0;

    public Sprite[] icons;
    public Image[] rowImages;
    public int tilesCount = 0;
    public Sprite[] combinedIcons;
    private int counter = 0;
    public void populateGrid()
    {
        
        for (int i = 0; i <= tilesCount -1 ; i += 2)
        {
            Debug.Log("I values" + i);
            int rand = Random.Range(0, 13);
            rowImages[i].sprite = icons[rand];
            rowImages[i].GetComponent<ImageFlipper>().spriteBack.sprite = rowImages[i].sprite;
            rowImages[i + 1].sprite = icons[rand];
            rowImages[i + 1].GetComponent<ImageFlipper>().spriteBack.sprite = rowImages[i + 1].sprite;


        }
        Shuffle(rowImages);
    }


    private void Start()
    {
        
       tilesCount=m_columns*m_rows;
        //At the beginning of the game we are generating the array and populating it with the number of rows that we select in our maximum row placeholder
        //Fetches The number of rows that we want to generate 
        rowA = new GameObject[m_rows];

        //Instantiates a row from the game object, repeates with the for loop Until it reaches the number of rows
        //It's stored inside the row array
        //It's assigned to the transform RowTransformPoint
        //Adjust the location of the rows

        for (int rows = 0; rows <m_rows; rows++)
        {
            rowA[rows] = Instantiate(rowPrefab);
            rowA[rows].transform.parent = RowTransformPoint;
            rowA[rows].transform.localScale = new Vector3 (1, 1, 1);
            //rowA[rows].GetComponent<HorizontalLayoutGroup>().enabled = false;
            

        }
        //This runs function to clean up the grid
        deleteColumns();
        CalculateChildren();
        populateGrid();
        HideIcons();
        Invoke("disableHorizontalGrid", 2);
        
    }

    public void HideIcons()
    {for (int i = 0; i < tilesCount; i++)
        {
            if (rowImages[i] != null)
            {
                rowImages[i].GetComponent<ImageFlipper>().StartCoroutine("ShowImages");
                
            }
            if (i+1 == tilesCount)
            {
                return;
            }
            if (rowImages[i+1] != null) { 
                
                rowImages[i + 1].GetComponent<ImageFlipper>().StartCoroutine("ShowImages");
            }
        }
    }
    //This function deletes the extra columns that are generated by the large prefab, Row by row
    public void deleteColumns()
    { 
        for (int rows = 0; rows< m_rows; rows++) {

           for (int column = m_columns; column < rowA[rows].transform.childCount; column++)
           {
                
               Destroy(rowA[rows].transform.GetChild(column).gameObject);
           
           }

          }
    }
    public  void Shuffle(Image[] array)
    {
        for (int i =tilesCount-1; i > 0; i--)
        {
            int rnd = Random.Range(0, i + 1);
            if (array[i] != null)
            {
                Sprite temp = array[i].sprite;
                
                array[i].sprite = array[rnd].sprite;
                array[rnd].sprite = temp;
            }
        }
    }

    public void CalculateChildren()
    {
        for (int rows = 0; rows < m_rows; rows++)
        {
            for (int column = 0; column < m_columns; column++)
            {
                //Debug.Log("adsa");
                rowImages[counter] = rowA[rows].transform.GetChild(column).transform.GetChild(0).GetComponent<Image>(); ;
                counter++;
            }

        }
    }

    //Fixes problem with alignment of the rows
    public void disableHorizontalGrid()
    {
        for(int i=0;i< rowA.Length; i++)
        {
            rowA[i].GetComponent<HorizontalLayoutGroup>().enabled = false;
        }
    }

  
   



}
